== Apache Sirona

____
Simple and extensible monitoring solution Java oriented applications.
____

http://sirona.incubator.apache.org[sirona.incubator.apache.org]

== Where does it come from?

* Started ~2008 as commons-monitoring
** Revival Q3 2013
* ~26k lines of code (Ohloh)

== Modules

[options="step"]
* Client/measure
* Collector
* Reporting

== Basis

Mainly two objects:

* Counter: statistic and concurrency holder on a value.
* Gauge: provide a value at a moment. History oriented.

Some more vocabulary:

* Role: name with unit
* Repository: counter/gauge manager
* StopWatch: counter wrapper (start/stop)
* Validation (node status)
* DataStores: persistence, link between repository and persistence

== Gauge

[source,java,numbered]
----
public interface Gauge {
    Role role();
    double value();
}
----

Defaults:

* CPU
* Memory
* ...

== Counter

Here the target is not to implement them but to reuse them to measure execution times:

* method
* HTTP request
* JDBC
* ...

Instrumentation:

* CDI/Spring/...
* ProxyFactory
* AspectJ
* sirona-javaagent
* JAX-RS
* Filter
* JTA
* ...

____
Experimental: dynamic interception
____

== Storage

* Extensible indeed!
* Default in memory (bench oriented)
* Cassandra (monitoring oriented)
* Graphite
* Cube
* More to come!

== GUI 1/4

image::shome.png[]

== GUI 2/4

image::report.png[]

== GUI 3/2

image::mbean-attributes.png[]

== GUI 4/4

image::mbean-operations.png[]


== Deployments

image::sirona-embed.png[]
image::sirona-collector.png[]
image::sirona-collector-pull.png[]
image::sirona-distributed.png[]

== Plugins

* New gauge
* New counter
* New storage (client/server/embedded)
* New plugin for the GUI (new tab)


== JavaAgent

____
Goal: get more control even on JVM classes.
____

It is an extensible JavaAgent. It allows counter configuration
+ add custom listeners.

== JavaAgent: custom code

[source,java,numbered]
----
public interface InvocationListener {
  boolean accept(String key);
  void before(AgentContext context);
  void after(AgentContext context, Object result, Throwable ex);
}
----

[source,java,numbered]
----
public class HttpUrlConnectionHeaderAdder
			implements InvocationListener {
  private static final String NAME = 
      "sun.net.www.protocol.http.HttpURLConnection.connect";

  @Override
  public void before(final AgentContext context) {
      HttpURLConnection.class.cast(context.getReference())
          .setRequestProperty("origin-test", "sirona");
  }

  @Override
  public boolean accept(final String key) {
    return key.equals(NAME);
  }
}
----

== Extend the GUI

* Based on a custom light framework (JS/Servlet/Velocity) to avoid dependency hell with JAX-RS like support

[source,java,numbered]
----
@Local // opt, only if rely on the JVM
public class JMXPlugin implements Plugin {
  public String name() { return "JUG"; }
  public Class<?> endpoints() { return JUGEndpoints.class; }
  public String mapping() { return "/jug"; }
}
----


[source,java,numbered]
----
public class JUGEndpoints {
  @Regex("")
  public Template home() throws IOException {
    String name = System.getProperty("jug.name", "Genova");
    return new Template("jug/main.vm",
             new MapBuilder<String, Object>()
               .set("name", name);
               .build());
  }

  @Regex("/update/([^/]*)/(.*)")
  public String doUpdate(String first, String[] parameters) {
    return ...;
  }
}
----

[source,html,numbered]
----
<div class="container-fluid">
  <div class="row">
    <div class="col-lg-12">
      Hello $name
	</div>
  </div>
</div>
#* some async js using $mapping/jug/update/... *#
----

== Sirona.more

* Boomerang integration (js monitoring)
* Gauges
** EhCache
** Hazelcast
** TomEE

